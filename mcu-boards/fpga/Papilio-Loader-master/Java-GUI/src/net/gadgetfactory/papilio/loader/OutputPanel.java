/*
  Part of the Papilio Loader

  Copyright (c) 2010-11 GadgetFactory LLC

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License version 2
  as published by the Free Software Foundation.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.gadgetfactory.papilio.loader;

import java.awt.BorderLayout;
import java.awt.Dimension;
import javax.swing.JPanel;
import javax.swing.BorderFactory;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;

public class OutputPanel extends JPanel
{
	final int OUTPUT_ROWS = 5;
	final int OUTPUT_COLUMNS = 70;
	
	private JTextArea txtOutput = new JTextArea(OUTPUT_ROWS, OUTPUT_COLUMNS);
	
	public JTextArea getOutputTextArea() {
		return txtOutput;
	}

	public OutputPanel(int width, int height, 
					   int topMargin, int rightMargin, int bottomMargin, int leftMargin) {
		
		// Create margin and Titled border, containing title at top, around this panel. 
		Border bdrMargin = BorderFactory.createEmptyBorder(topMargin, leftMargin, bottomMargin, rightMargin);
		this.setBorder(BorderFactory.createTitledBorder(
							bdrMargin, "Information", TitledBorder.LEFT, TitledBorder.ABOVE_TOP));

/*	------------------------------------------------------------------------------------
 * 	Scenario: You need to display a component in as much space as it can get.
 *     If it is the only component in its container, use GridLayout or BorderLayout.
 *	------------------------------------------------------------------------------------ */
		// Each JPanel object is initialized to use a FlowLayout, unless you specify it differently.
		this.setLayout(new BorderLayout());
		
//		txtOutput.setText("This is a non-editable word-wrapped JTextArea. " +
//                "A text area is a \"plain\" text component, " +
//                "which means that although it can display text " +
//                "in any font, all of the text is in the same font.\n\n" + 
//                "Whatever output generated by loader console executable " + 
//                "will be captured and displayed herein.");
		txtOutput.setText("");
		txtOutput.setEditable(false);
		txtOutput.setLineWrap(true);

/*	------------------------------------------------------------------------------------
 *	As per the BorderLayout, if the window is enlarged, the center area 
 * 	gets as much of the available space as possible. The other areas expand only 
 * 	as much as necessary to fill all available space. 
 *	------------------------------------------------------------------------------------ */
		/*	Output text area displays the output produced by running console programs and
			hence as such, we need to make the Output text area - and hence this JPanel -
			as large as possible. 
			Since Output text area is space-hungry, put it in CENTER.
		*/
		this.add(new JScrollPane(txtOutput), BorderLayout.CENTER);	

		this.setPreferredSize(new Dimension(width, height));
//		this.setMaximumSize(new Dimension(Short.MAX_VALUE, Short.MAX_VALUE));
	}
	
}
